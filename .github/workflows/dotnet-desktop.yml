name: CatNote

on:
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore

    - name: Build the application
      run: dotnet build --no-restore --configuration release

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --no-restore --verbosity detailed CatNote.Tests/CatNote.Tests.csproj

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu'
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze with code coverage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"Finka95_CatNote" /o:"finka95" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet restore
        dotnet build --no-restore 
        dotnet test --no-restore --verbosity detailed /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./Results/
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        
    - name: Save coverage report as artifact
      if: always() # Save the report even if the build or tests fail
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ./Results/*.opencover.xml

    # - name: Install Code Coverage tool
    #     shell: powershell
    #     run: dotnet tool install --global JetBrains.dotCover.GlobalTool
    # - name: Build and analyze
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   shell: powershell
    #   run: |
    #     .\.sonar\scanner\dotnet-sonarscanner begin /k:"Finka95_CatNote" /o:"finka95" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    #      dotnet restore
    #      dotnet build --no-restore 
    #      dotnet dotcover test --dcReportType=HTML 
    #     .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"